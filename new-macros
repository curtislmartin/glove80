// near macros {


 //
    // Tab, App & Window Switcher
    //
    tab_switcher_tap: tab_switcher_tap {
        compatible = "zmk,behavior-macro";
        wait-ms = <0>;
        tap-ms = <0>;
        #binding-cells = <0>;
        bindings = <&macro_press &kp LGUI>, <&macro_tap &kp TAB>, <&macro_release &kp LGUI>;
    };

    window_switcher_tap: window_switcher_tap {
        compatible = "zmk,behavior-macro";
        wait-ms = <0>;
        tap-ms = <0>;
        #binding-cells = <0>;
        bindings = <&macro_press &kp LGUI>, <&macro_tap &kp GRAVE>, <&macro_release &kp LGUI>;
    };

    browser_tab_switcher_tap: browser_tab_switcher_tap {
        compatible = "zmk,behavior-macro";
        wait-ms = <0>;
        tap-ms = <0>;
        #binding-cells = <0>;
        bindings = <&macro_press &kp LCTRL>, <&macro_tap &kp TAB>, <&macro_release &kp LCTRL>;
    };
        // Then define the hold behaviors
    mod_window: mod_window {
        compatible = "zmk,behavior-macro-one-param";
        wait-ms = <0>;
        tap-ms = <0>;
        #binding-cells = <1>;
        bindings
            = <&macro_param_1to1>
            , <&macro_press &kp MACRO_PLACEHOLDER>
            , <&macro_tap &kp GRAVE>
            , <&macro_pause_for_release>
            , <&macro_param_1to1>
            , <&macro_release &kp MACRO_PLACEHOLDER>
            ;
    };

    // Finally define the combined behaviors
    app_switcher: app_switcher {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&tab_switcher_tap>, <&mod_tab LGUI>;
        mods = <(MOD_LSFT)>;
    };

    window_switcher: window_switcher {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&window_switcher_tap>, <&mod_window LGUI>;
        mods = <(MOD_LSFT)>;
    };

    browser_tab_switcher: browser_tab_switcher {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&browser_tab_switcher_tap>, <&mod_tab LCTRL>;
        mods = <(MOD_LSFT)>;
    };